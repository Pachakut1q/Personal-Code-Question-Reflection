//给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，并返回移除后数组的新长度。
//不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并原地修改输入数组。
//元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

//直接双循环暴力解法
int removeElementRaw(vector<int>& nums, int val)
{
	int size = nums.size();
	for (int i = 0; i < size; i++)
	{
		if (nums[i] == val)//找到需要移除的元素，将数组集体向前移动一位
		{
			for (int j = i + 1; j < size; j++)
			{
				nums[j - 1] = nums[j];
			}
			i--;
			size--;
		}
		return size;
	}
	//时间复杂度 O(n^2)	空间复杂度 O(1)
}

//快慢指针法（双指针）
int removeElementDoublePointers(vector<int>& nums, int val)
{
	int slowIndex = 0;
	for (int fastIndex = 0; fastIndex < nums.size(); fastIndex++)
	{
		if (val != nums[fastIndex])//当前元素不是要移除的元素，则快慢指针一起朝后移动
		{
			nums[slowIndex++] = nums[fastIndex];//先复制再slowIndex+1
		}
		//当前元素是要移除元素时，慢指针不动快指针继续移动，在下一个循环时，
		//慢指针指向的数组元素将被替换成快指针指向的元素
	}
	return slowIndex;

	//时间复杂度 O(n)	空间复杂度 O(1)
}
