/*给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中一个长度最小的连续子数组，其元素之和 ≥ s ，
	并返回其长度。如果不存在符合条件的子数组，返回 0。
	示例：
	输入：s = 7, nums = [2,3,1,2,4,3]
	输出：2
	解释：子数组 [4,3] 是该条件下的长度最小的子数组。*/

int minSubArrayLen(vector<int>& nums, int s)   
{
	//滑动窗口解法（类似于双指针）
	int result = INT32_MAX;//INT32_MAX=2147483647
	int sum = 0;
	int i = 0;
	int subLength = 0;
	for (int j = 0; j < nums.size(); j++)
	{
		sum += nums[j];
		while (sum >= s)//一旦找到满足条件的子数组就更新result即最小长度，并移动窗口的起始位置
		{
			subLength = j - i + 1; 
			result = result < subLength ? result : subLength;//将更小的长度赋给result
			sum -= nums[i++];//移动起始位置
		}
	}
	return result == INT32_MAX ? 0 : result;//如果result一直没被赋过值即等于INT32_MAX,则长度为0

	//时间复杂度 O(n)	空间复杂度 O(1)
}
