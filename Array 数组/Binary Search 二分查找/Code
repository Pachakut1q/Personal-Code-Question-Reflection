//给定数组是升序且无重复元素的
//两种方法，区别在于区间设置的不同。A函数定义target在区间[left,right]，B函数定义target在区间[left,right)  

int binarySearchA(vector<int>& nums, int target)
//用&的原因是避免调用时复制整个“数组”，仅仅以引用形式传递参数，减少开销
{
	int left = 0;
	int right = nums.size() - 1;

	while (left <= right)//设置target在区间[left,right]，在这种情况下L=R是有意义的.也就是说初始情况下，right即数组最后一个元素下标
	{
		int middle = left + (right - left) / 2;//防止栈溢出:如果r和l的值超过最大值则（l+r）/2引发栈溢出
		if(target < nums[middle])//小于中间值
		{
			right = middle - 1;
		}
		else if (target > nums[middle])//大于中间值
		{
			left = middle + 1;
		}
		else//等于中间值
		{
			return middle;
		}
	}

	return -1;//没找到target就返回-1
}

int binarySearchB(vector<int>& nums, int target)
{
	int left = 0;
	int right = nums.size();//定义target在区间[left,right)，right即数组最后一个元素下标+1
	
	while (left < right)
	{
		int middle = left + (right - left) / 2;
		if (target < nums[middle])
		{
			right = middle;
		}
		else if (target > nums[middle])
		{
			left = middle + 1;
		}
		else 
		{
			return middle;
		}
	}

	return -1;
}
